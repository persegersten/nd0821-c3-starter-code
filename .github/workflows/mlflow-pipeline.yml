name: Build-model-with-MLflow

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:

  tests: # <— NEW JOB FOR TESTS
    name: Unit tests (api + train_model)
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: components/train_model

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies and pytest
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Run pytest for train_model
        run: |
          echo "PYTHONPATH=$PYTHONPATH"
          pytest -q components/train_model/tests

      - name: Run pytest for api
        run: |
          pytest -q components/api/tests

  lint:
    name: Lint (flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install flake8
      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=20 --max-line-length=150 --statistics

  build-and-train:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
      - name: Cache conda
        uses: actions/cache@v4
        with:
          path: ~/.conda/pkgs
          key: conda-pkgs-${{ runner.os }}-${{ hashFiles('conda.yml') }}
      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: conda.yml
          activate-environment: mlflow-env
          auto-activate-base: false
          use-only-tar-bz2: true
      - name: Run MLflow project
        run: |
          mlflow --version
          mlflow run .
      - name: Debug – lista modeller
        run: ls -R model
      - name: Upload artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: model
          path: |
            **/random_forest_model.joblib
            **/onehot_encoder.joblib
          if-no-files-found: error

  deploy-heroku:
    needs: build-and-train
    runs-on: ubuntu-latest
    env:
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_BRANCH: main
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Heroku deploy (HTTPS + .netrc) -----------------------------------------
      # Requires repo/org secrets:
      #   HEROKU_EMAIL       -> your Heroku account email
      #   HEROKU_API_KEY     -> your Heroku API token (NOT your account password)
      # Adjust HEROKU_APP and HEROKU_BRANCH if needed.

      - name: Prepare env
        run: |
          echo "Using branch: ${HEROKU_BRANCH}"

      - name: Authenticate to Heroku via ~/.netrc
        # Write .netrc in $HOME and lock permissions to 600.
        # Git/cURL will automatically use this for https://git.heroku.com
        run: |
          set -euo pipefail
          : "${HEROKU_EMAIL:?Missing HEROKU_EMAIL}"
          : "${HEROKU_API_KEY:?Missing HEROKU_API_KEY}"
          cat > "$HOME/.netrc" <<EOF
          machine api.heroku.com
            login $HEROKU_EMAIL
            password $HEROKU_API_KEY
          machine git.heroku.com
            login $HEROKU_EMAIL
            password $HEROKU_API_KEY
          EOF
          chmod 600 "$HOME/.netrc"
        env:
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Verify ~/.netrc exists (sanitized)
        # Don't print secrets; just confirm the 'machine' lines are present
        run: |
          set -euo pipefail
          echo "HOME=$HOME"
          ls -l "$HOME/.netrc"
          grep -E "^machine (api|git)\.heroku\.com$" "$HOME/.netrc"

      - name: Setup Git remote
        # Use a clean URL (no credentials in URL). Let .netrc carry auth.
        run: |
          set -euo pipefail
          git config --global --unset-all http.https://git.heroku.com/.extraheader || true
          git remote remove heroku || true
          git remote add heroku https://git.heroku.com/udacity-c3-model.git
          git remote -v

      - name: Sanity check connectivity (fails fast if auth is wrong)
        run: |
          set -euo pipefail
          git ls-remote heroku >/dev/null

      - name: Deploy to Heroku
        run: |
          set -euo pipefail
          echo "Deploying branch: $HEROKU_BRANCH"
          git push heroku HEAD:$HEROKU_BRANCH --force
